# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the Odoo plugin for Dia !
#

# from PyQt4.QtGui import QApplication, QMainWindow
# from PyQt4.QtCore import *
# from PyQt4.QtGui import *
# from PyQt4 import uic
from datetime import (timedelta, datetime as pyDateTime, date as pyDate, time as pyTime)

import logging
import sys
import serial
import os
import time

from odoo import http, _
from odoo.addons.l10n_ve_fiscal_printer.lib import Tfhka
from odoo.exceptions import UserError

_logger = logging.getLogger(__name__)

STR_DENIED = {
    'Ñ':'N', 'ñ':'n', 'Á':'A', 'á':'a', 'É':'E', 'é':'e', 'Í':'I', 'í':'i',
    'Ó':'O', 'ó':'o', 'Ú':'U', 'ú':'u',
}

class Main(http.Controller):

    def __init__(self):
        self.printer = Tfhka.Tfhka()
        self.txt_informacion = ''

    def open_port(self):
        self.txt_informacion = ''
        puerto = '/dev/ttyACM1'
        ser = serial.Serial(puerto)
        try:
            resp = self.printer.OpenFpctrl(str(puerto))
            if resp:
                self.txt_informacion.setText("Impresora Conectada Correctamente en: " + puerto)
                _logger.info("%s", self.txt_informacion)
            else:
                self.txt_informacion = _("Impresora no Conectada o Error Accediendo al Puerto")
        except serial.SerialException:
            self.txt_informacion = _("Impresora no Conectada o Error Accediendo al Puerto")

    def close_port(self):
        self.txt_informacion.setText("")
        resp = self.printer.CloseFpctrl()
        if not resp:
            self.txt_informacion.setText("Impresora Desconectada")
        else:
            self.txt_informacion.setText("Error")

    def enviar_cmd(self):
        cmd = self.txt_cmd.text()
        self.printer.SendCmd(str(cmd))

    def enviar_archivo(self):
        nombre_fichero = QFileDialog.getOpenFileName(self, "Abrir fichero", "/Desktop")
        if nombre_fichero:
            fichero_actual = nombre_fichero
            filename = str(QFileInfo(nombre_fichero).fileName())
            dirname = str(QFileInfo(nombre_fichero).path())
            path = open(os.path.join(dirname, filename), 'r')
            self.printer.SendCmdFile(path)
            self.txt_informacion.setText("archivo enviado")

    def estado_error(self):
        self.txt_informacion.setText("")
        self.estado = self.printer.ReadFpStatus()
        self.txt_informacion.setText("Estado: " + self.estado[0] + "\n" + "Error: " + self.estado[5])

    def imprimir_ReporteZ(self):
        self.printer.PrintZReport()

    def imprimir_ReporteX(self):
        self.printer.PrintXReport()

    def obtener_estado(self):
        # estado = str(self.cmbestado.currentText())
        estado = str("S1")

        if estado == "S1":
            print('jeison')
            print('jeison')
            print('jeison')
            print('jeison')
            print('jeison')
            estado_s1 = self.printer.GetS1PrinterDataS1()
            print('jeisonPernia')
            print(estado_s1)
            print('jeisonPernia')
            print('jeisonPernia')
            salida = "---Estado S1---\n"
            salida += "\nNumero Cajero: " + str(estado_s1._cashierNumber)
            salida += "\nSubtotal Ventas: " + str(estado_s1._totalDailySales)
            salida += "\nNumero Ultima Factura: " + str(estado_s1._lastInvoiceNumber)
            salida += "\nCantidad Facturas Hoy: " + str(estado_s1._quantityOfInvoicesToday)
            salida += "\nNumero Ultima Nota de Debito: " + str(estado_s1._lastDebtNoteNumber)
            salida += "\nCantidad Notas de Debito Hoy: " + str(estado_s1._quantityDebtNoteToday)
            salida += "\nNumero Ultima Nota de Credito: " + str(estado_s1._lastNCNumber)
            salida += "\nCantidad Notas de Credito Hoy: " + str(estado_s1._quantityOfNCToday)
            salida += "\nNumero Ultimo Documento No Fiscal: " + str(estado_s1._numberNonFiscalDocuments)
            salida += "\nCantidad de Documentos No Fiscales: " + str(estado_s1._quantityNonFiscalDocuments)
            salida += "\nCantidad de Reportes de Auditoria: " + str(estado_s1._auditReportsCounter)
            salida += "\nCantidad de Reportes Fiscales: " + str(estado_s1._fiscalReportsCounter)
            salida += "\nCantidad de Reportes Z: " + str(estado_s1._dailyClosureCounter)
            salida += "\nNumero de RIF: " + str(estado_s1._rif)
            salida += "\nNumero de Registro: " + str(estado_s1._registeredMachineNumber)
            salida += "\nHora de la Impresora: " + str(estado_s1._currentPrinterTime)
            salida += "\nFecha de la Impresora: " + str(estado_s1._currentPrinterDate)
            self.txt_informacion.setText(salida)

        if estado == "S2":
            estado_s2 = self.printer.GetS2PrinterData()
            salida = "---Estado S2---\n"
            salida += "\nSubtotal de BI: " + str(estado_s2._subTotalBases)
            salida += "\nSubtotal de Impuesto: " + str(estado_s2._subTotalTax)
            salida += "\nData Dummy: " + str(estado_s2._dataDummy)
            salida += "\nCantidad de articulos: " + str(estado_s2._quantityArticles)
            salida += "\nMonto por Pagar: " + str(estado_s2._amountPayable)
            salida += "\nNumero de Pagos Realizados: " + str(estado_s2._numberPaymentsMade)
            salida += "\nTipo de Documento: " + str(estado_s2._typeDocument)
            self.txt_informacion.setText(salida)

        if estado == "S3":
            estado_s3 = self.printer.GetS3PrinterData()
            salida = "---Estado S3---\n"
            salida += "\nTipo Tasa 1 (1 = Incluido, 2= Excluido): " + str(estado_s3._typeTax1)
            salida += "\nValor Tasa 1: " + str(estado_s3._tax1) + " %"
            salida += "\nTipo Tasa 2 (1 = Incluido, 2= Excluido): " + str(estado_s3._typeTax2)
            salida += "\nValor Tasa2: " + str(estado_s3._tax2) + " %"
            salida += "\nTipo Tasa 3 (1 = Incluido, 2= Excluido): " + str(estado_s3._typeTax3)
            salida += "\nValor Tasa 3: " + str(estado_s3._tax3) + " %"
            salida += "\n\nLista de Flags: " + str(estado_s3._systemFlags)
            self.txt_informacion.setText(salida)

        if estado == "S4":
            estado_s4 = self.printer.GetS4PrinterData()
            salida = "---Estado S4---\n"
            salida += "\nMontos en Medios de Pago: " + str(estado_s4._allMeansOfPayment)
            self.txt_informacion.setText(salida)

        if estado == "S5":
            estado_s5 = self.printer.GetS5PrinterData()
            salida = "---Estado S5---\n"
            salida += "\nNumero de RIF: " + str(estado_s5._rif)
            salida += "\nNumero de Registro: " + str(estado_s5._registeredMachineNumber)
            salida += "\nNumero de Memoria de Auditoria : " + str(estado_s5._auditMemoryNumber)
            salida += "\nCapacidad Total de Memoria Auditoria: " + str(estado_s5._auditMemoryTotalCapacity) + " MB"
            salida += "\nEspacio Disponible: " + str(estado_s5._auditMemoryFreeCapacity) + " MB"
            salida += "\nCantidad Documentos Registrados: " + str(estado_s5._numberRegisteredDocuments)
            self.txt_informacion.setText(salida)

        if estado == "S6":
            estado_s6 = self.printer.GetS6PrinterData()
            salida = "---Estado S6---\n"
            salida += "\nModo Facturacion: " + str(estado_s6._bit_Facturacion)
            salida += "\nModo Slip: " + str(estado_s6._bit_Slip)
            salida += "\nModo Validacion: " + str(estado_s6._bit_Validacion)
            self.txt_informacion.setText(salida)

    def obtener_reporteZ(self):
        reporte = self.printer.GetZReport()
        salida = "Numero Ultimo Reporte Z: " + str(reporte._numberOfLastZReport)
        salida += "\nFecha Ultimo Reporte Z: " + str(reporte._zReportDate)
        salida += "\nHora Ultimo Reporte Z: " + str(reporte._zReportTime)
        salida += "\nNumero Ultima Factura: " + str(reporte._numberOfLastInvoice)
        salida += "\nFecha Ultima Factura: " + str(reporte._lastInvoiceDate)
        salida += "\nHora Ultima Factura: " + str(reporte._lastInvoiceTime)
        salida += "\nNumero Ultima Nota de Debito: " + str(reporte._numberOfLastDebitNote)
        salida += "\nNumero Ultima Nota de Credito: " + str(reporte._numberOfLastCreditNote)
        salida += "\nNumero Ultimo Doc No Fiscal: " + str(reporte._numberOfLastNonFiscal)
        salida += "\nVentas Exento: " + str(reporte._freeSalesTax)
        salida += "\nBase Imponible Ventas IVA G: " + str(reporte._generalRate1Sale)
        salida += "\nImpuesto IVA G: " + str(reporte._generalRate1Tax)
        salida += "\nBase Imponible Ventas IVA R: " + str(reporte._reducedRate2Sale)
        salida += "\nImpuesto IVA R: " + str(reporte._reducedRate2Tax)
        salida += "\nBase Imponible Ventas IVA A: " + str(reporte._additionalRate3Sal)
        salida += "\nImpuesto IVA A: " + str(reporte._additionalRate3Tax)
        salida += "\nNota de Debito Exento: " + str(reporte._freeTaxDebit)
        salida += "\nBI IVA G en Nota de Debito: " + str(reporte._generalRateDebit)
        salida += "\nImpuesto IVA G en Nota de Debito: " + str(reporte._generalRateTaxDebit)
        salida += "\nBI IVA R en Nota de Debito: " + str(reporte._reducedRateDebit)
        salida += "\nImpuesto IVA R en Nota de Debito: " + str(reporte._reducedRateTaxDebit)
        salida += "\nBI IVA A en Nota de Debito: " + str(reporte._additionalRateDebit)
        salida += "\nImpuesto IVA A en Nota de Debito: " + str(reporte._additionalRateTaxDebit)
        salida += "\nNota de Credito Exento: " + str(reporte._freeTaxDevolution)
        salida += "\nBI IVA G en Nota de Credito: " + str(reporte._generalRateDevolution)
        salida += "\nImpuesto IVA G en Nota de Credito: " + str(reporte._generalRateTaxDevolution)
        salida += "\nBI IVA R en Nota de Credito: " + str(reporte._reducedRateDevolution)
        salida += "\nImpuesto IVA R en Nota de Credito: " + str(reporte._reducedRateTaxDevolution)
        salida += "\nBI IVA A en Nota de Credito: " + str(reporte._additionalRateDevolution)
        salida += "\nImpuesto IVA A en Nota de Credito: " + str(reporte._additionalRateTaxDevolution)
        self.txt_informacion.setText(salida)

    def obtener_reporteX(self):
        reporte = self.printer.GetXReport()
        salida = "Numero Proximo Reporte Z: " + str(reporte._numberOfLastZReport)
        salida += "\nFecha Ultimo Reporte Z: " + str(reporte._zReportDate)
        salida += "\nHora Ultimo Reporte Z: " + str(reporte._zReportTime)
        salida += "\nNumero Ultima Factura: " + str(reporte._numberOfLastInvoice)
        salida += "\nFecha Ultima Factura: " + str(reporte._lastInvoiceDate)
        salida += "\nHora Ultima Factura: " + str(reporte._lastInvoiceTime)
        salida += "\nNumero Ultima Nota de Debito: " + str(reporte._numberOfLastDebitNote)
        salida += "\nNumero Ultima Nota de Credito: " + str(reporte._numberOfLastCreditNote)
        salida += "\nNumero Ultimo Doc No Fiscal: " + str(reporte._numberOfLastNonFiscal)
        salida += "\nVentas Exento: " + str(reporte._freeSalesTax)
        salida += "\nBase Imponible Ventas IVA G: " + str(reporte._generalRate1Sale)
        salida += "\nImpuesto IVA G: " + str(reporte._generalRate1Tax)
        salida += "\nBase Imponible Ventas IVA R: " + str(reporte._reducedRate2Sale)
        salida += "\nImpuesto IVA R: " + str(reporte._reducedRate2Tax)
        salida += "\nBase Imponible Ventas IVA A: " + str(reporte._additionalRate3Sal)
        salida += "\nImpuesto IVA A: " + str(reporte._additionalRate3Tax)
        salida += "\nNota de Debito Exento: " + str(reporte._freeTaxDebit)
        salida += "\nBI IVA G en Nota de Debito: " + str(reporte._generalRateDebit)
        salida += "\nImpuesto IVA G en Nota de Debito: " + str(reporte._generalRateTaxDebit)
        salida += "\nBI IVA R en Nota de Debito: " + str(reporte._reducedRateDebit)
        salida += "\nImpuesto IVA R en Nota de Debito: " + str(reporte._reducedRateTaxDebit)
        salida += "\nBI IVA A en Nota de Debito: " + str(reporte._additionalRateDebit)
        salida += "\nImpuesto IVA A en Nota de Debito: " + str(reporte._additionalRateTaxDebit)
        salida += "\nNota de Credito Exento: " + str(reporte._freeTaxDevolution)
        salida += "\nBI IVA G en Nota de Credito: " + str(reporte._generalRateDevolution)
        salida += "\nImpuesto IVA G en Nota de Credito: " + str(reporte._generalRateTaxDevolution)
        salida += "\nBI IVA R en Nota de Credito: " + str(reporte._reducedRateDevolution)
        salida += "\nImpuesto IVA R en Nota de Credito: " + str(reporte._reducedRateTaxDevolution)
        salida += "\nBI IVA A en Nota de Credito: " + str(reporte._additionalRateDevolution)
        salida += "\nImpuesto IVA A en Nota de Credito: " + str(reporte._additionalRateTaxDevolution)
        self.txt_informacion.setText(salida)

    def ImpZpornumero(self):
        n_ini = self.imp_num_ini.value()
        n_fin = self.imp_num_fin.value()
        self.printer.PrintZReport("A", n_ini, n_fin)

    def ImpZporfecha(self):
        n_ini = self.imp_date_ini.date().toPyDate()
        n_fin = self.imp_date_fin.date().toPyDate()
        self.printer.PrintZReport("A", n_ini, n_fin)

    def replace_str(self, name):
        if name:
            for string in name:
                if string in STR_DENIED:
                    name = name.replace(string, STR_DENIED.get(string))
        return name

    def factura(self, data):
        # Factura sin Personalizar*
        self.printer.SendCmd(str("@COMMENT/COMENTARIO"))
        print (data['data']['orderlines'])
        for line in data['data']['orderlines']:
            price = str(int(line['price']*100))
            fill_price = 10
            price = price.zfill(fill_price)
            qty = str(int(line['quantity']*1000))
            fill_qty = 8
            qty = qty.zfill(fill_qty)
            product_name = line['product_name']
            tax_rate = '!'
            srtcmd = str("%s%s%s%s" % (tax_rate, price, qty, product_name))
            print (srtcmd)
            self.printer.SendCmd(srtcmd)
        # self.printer.SendCmd(str(" 000000030000001000Tax Free/Producto Exento"))
        # self.printer.SendCmd(str("!000000050000001000Tax Rate 1/Producto Tasa General"))
        # self.printer.SendCmd(str('"' + "000000070000001000Tax Rate 2/ Producto Tasa Reducida"))
        # self.printer.SendCmd(str("#000000090000001000Tax Rate 3/ Producto Tasa Adicional"))
        self.printer.SendCmd(str("3"))
        self.printer.SendCmd(str("101"))

    def facturaper(self):
        # Factura Personalizada
        self.printer.SendCmd(str("iR*21.122.012"))
        self.printer.SendCmd(str("iS*Pedro Perez"))
        self.printer.SendCmd(str("i00Direccion: Ppal Siempre Viva"))
        self.printer.SendCmd(str("i01Telefono: +58(212)555-55-55"))
        self.printer.SendCmd(str("i02CAJERO: 00001"))
        self.printer.SendCmd(str("@COMMENT/COMENTARIO"))
        self.printer.SendCmd(str(" 000000030000001000Tax Free/Producto Exento"))
        self.printer.SendCmd(str("!000000050000001000Tax Rate 1/Producto Tasa General"))
        self.printer.SendCmd(str('"' + "000000070000001000Tax Rate 2/ Producto Tasa Reducida"))
        self.printer.SendCmd(str("#000000090000001000Tax Rate 3/ Producto Tasa Adicional"))
        self.printer.SendCmd(str("3"))
        self.printer.SendCmd(str("101"))

    def print_customer_invoice(self, data):
        estado_s1 = self.printer.GetS1PrinterData()

        _logger.info('################## Client Data ########################')
        print('estado_s1')
        print(estado_s1)
        print('estado_s1')
        _logger.info('################## Client Data ########################')
        print(ssss)
        dni = 'iR*%s' %data['data']['customerve']['dni']
        client = 'iS*%s' %data['data']['customerve']['client']
        street = 'i00Direccion: %s' %data['data']['customerve']['street']
        phone = 'i01Teléfono: %s' %data['data']['customerve'].get('phone', '')
        cashier = 'i02CAJERO: %s' %data['data']['cashier']
        name = 'i03%s' %data['data']['name']
        self.printer.SendCmd(dni)
        self.printer.SendCmd(client)
        self.printer.SendCmd(street)
        self.printer.SendCmd(phone)
        self.printer.SendCmd(cashier)
        self.printer.SendCmd(name)

        _logger.info('#################### Product Data #####################')
        print(data['data'])
        print('ddd')
        print('ddd')
        fill_price = 10
        fill_qty = 8
        for line in data['data']['orderlines']:
            price = str("{0:.2f}".format(line['price'])).replace('.', '').zfill(fill_price)
            quantity = str("{0:.3f}".format(line['quantity'])).replace('.', '').zfill(fill_qty)
            if line['barcode'] or line['default_code']:
                code = '|%s|' %line['barcode'] if line['barcode'] else line['default_code']
            else:
                code = False
            if code:
                code2 = '|%s|' %code
            # product_name = line['product_name'][0:30]
            product_name = self.replace_str(line['product_name'][0:30])
            tax_rate = False
            if len(line['taxes']) > 1 and all(tax['aliquot_type'] in ['additional','general'] for tax in line['taxes']):
                tax_rate = '#'
            elif all(tax['amount'] == 0 for tax in line['taxes']):
                tax_rate = " "
            elif all(tax['aliquot_type'] == 'reduced' for tax in line['taxes']):
                tax_rate = '"'
            elif all(tax['aliquot_type'] == 'general' for tax in line['taxes']):
                tax_rate = '!'
            else:
                raise UserError(_('Error in tax configuration of product %s.') % product_name)
            srtcmd = str("%s%s%s%s" % (tax_rate, price, quantity, product_name))
            self.printer.SendCmd(srtcmd)
            if line['discount']:
                discount = str("{0:.2f}".format(line['discount'])).replace('.','').zfill(4)
                srtcmd_discount = 'p-%s' %(
                    discount
                )
                print('srtcmd_discount')
                print(srtcmd_discount)
                print(srtcmd_discount)
                print(srtcmd_discount)
                # self.printer.SendCmd(str("3"))
                self.printer.SendCmd(srtcmd_discount)


        fill_amount = 12
        for payment in data['data']['paymentlines']:
            amount = str("{0:.2f}".format(payment['amount'])).replace('.', '').zfill(fill_amount)
            hka_printer_id = payment['hka_printer_id']
            payment_srtcmd = str("%s%s%s" % ('2', hka_printer_id, amount))
            self.printer.SendCmd(payment_srtcmd)

        print()
        # print(linesss)

        _logger.info('###################### END DATA #######################')
        self.printer.SendCmd(str("3"))
        end_trama = self.printer.SendCmd(str("101"))
        # print('end_trama')
        # print(end_trama)
        print('end_trama')
        print('end_trama')


    def send_cmd(self, cmd):
        self.printer.SendCmd(str(cmd))

    def print_z_report(self):
        self.printer.PrintZReport()

    def print_x_report(self):
        self.printer.PrintXReport()

